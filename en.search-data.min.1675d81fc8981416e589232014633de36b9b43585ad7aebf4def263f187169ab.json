[{"id":0,"href":"/psychopy-notes/docs/setup/","title":"Setup","section":"Docs","content":"Specifications #  Here are the specs of my hardware and the version of psychopy I am using:\nModel: Macbook Pro 2015 13-inch Processor: 2.7 GHz Dual-Core Intel Core i5 Memory: 8 GB 1867 MHz DDR3 Graphics: Intel Iris Graphics 6100 1536 MB OS: macOS Big Sur 11.4 Python: Python3.9 PsychoPy: v2021.1.4 Via Homebrew #  Installed GUI version of PsychoPy into my Applications directory using homebrew (or the standalone installer).\n# install Homebrew on macOS /bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; # if not already installed brew install python # will install latest version (3.9) automatically # install PsychoPy app brew install --cask psychopy \nThis works well and I\u0026rsquo;m able to open the program:\nSetup for code only #  But I also wanted to be able to prepare for programmatic-only usage instead of only interface+code. I feel like this can be more flexible in some cases where the GUI may not allow for precise customizations.\nMy directory for this summer project looks like this. I created a test directory called playground within programmatic:\n└── psychopy ├── demos ├── graphical └── programmatic └── playground \nIt\u0026rsquo;s a fairly large package and is constantly updated, so installing it globally would not be the best idea; I can change directory into the playground directory, create a virtualenv to install psychopy using pip. This way, the entire psychopy package can be used isolated within that folder only.\ncd psychopy/programmatic virtualenv venv # creates a virtual environment using python 3.9 pip install psychopy # installs psychopy and all its dependencies touch main.py # create main.py file # it should now look like this. └── psychopy ├── demos ├── graphical └── programmatic └── playground ├── venv │\t└── \u0026#34;psychopy source\u0026#34; └── main.py Sample code #  I took the sample code from their \u0026ldquo;scripting only\u0026rdquo; docs and put it into main.py using any text editor:\nfrom psychopy import visual, core # import some libraries from PsychoPy #create a window mywin = visual.Window([800,600], monitor=\u0026#34;testMonitor\u0026#34;, units=\u0026#34;deg\u0026#34;) #create some stimuli grating = visual.GratingStim(win=mywin, mask=\u0026#34;circle\u0026#34;, size=3, pos=[-4,0], sf=3) fixation = visual.GratingStim(win=mywin, size=0.5, pos=[0,0], sf=0, rgb=-1) #draw the stimuli and update the window grating.draw() fixation.draw() mywin.update() #pause, so you get a chance to see it! core.wait(10.0) \nAfter pressing cmd+B to compile it, we should expect to see a window pop up with multiple stimuli and it should close after 10 seconds:\n\nNow that we have everything set up, we should proceed the actual demos and take note of any difficulties and/or successes. The visual search task would be a good start.\nOpen source packages #  I decided to write these logs in markdown as a form of documentation so it can be easy to view updates. I\u0026rsquo;m using Hugo static site generator with a book theme because it is clean and easy to setup for documentation purposes.\n"},{"id":1,"href":"/psychopy-notes/docs/setup/visual-search/","title":"Visual Search","section":"Setup","content":"Visual Search Task #  The purpose of this entry is to implement the visual search task from Chapter 9 of Peirce and MacAskill\u0026rsquo;s \u0026ldquo;Building experiments in PsychoPy\u0026rdquo;.\nCriteria #   Small hexagonal stimulus  Colored black for half, red for the other half   0-8 distractor hexagons  Always colored black    "},{"id":2,"href":"/psychopy-notes/docs/setup/hidden/","title":"Hidden","section":"Setup","content":"This page is hidden in menu #  Quondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "}]